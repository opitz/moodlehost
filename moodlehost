#!/usr/bin/env bash

# script to run an Apache instance with all trimmings to run or develop a Moodle environment
# IMPORTANT! The provided server is by no means secure and shouild never be used in a production environment! 
# m.opitz@qmul.ac.uk | 2019-11-04

# v.0.1 - works
# v.0.2 - allowing cli options to override values
# v.1.0 - added installer script - GM
# v.1.1 - allowing to specify path to webroot
# v.1.2 - allowing to specify path to filedir
# v.1.3 - added status report
# v.1.4 - added support for PHP 7.4

version=1.4

usage() { 
	echo "Usage: $0 [-d <db_host_ip>] [-h] [-m <moodledata_path>] [-p <ip_port>] [-v <php_version> [start][stop][purge]" 1>&2; 
	exit 1; 
}

help() {
	echo "Usage: $0 [-d <db_host_ip>] [-h] [-m <moodledata_path>] [-p <ip_port>] [-v <php_version> [start][stop][purge]" 1>&2; 
	echo "available options:"
	echo "-d <db_host_ip>: set the IP address of the database server (default = 127.0.0.1)"
	echo "-f <path_to_filedir>: map an existing filedir repository into /var/www/moodledata/filedir"
	echo "-h this help page"
	echo "-m <moodledata>: set path on host(!) to moodledata (default is $PWD/moodledata)"
	echo "-p <port>: set the port number used by Apache (default=80)"	
	echo "-v <php_version>: select the PHP version (default=7.3, allowed values: 7.0, 7.1, 7.2, 7.3)"
	echo "-w <webroot>: set the path to the webroot directory (default: $PWD)"
	exit 1;
}

function check_container() {
	c_name=$1
#	do this for 'moodlehost' containers only
	if [[ $c_name == *"moodlehost"* ]]; then
	echo '---------------------------------------'
	echo 'Docker container '$c_name

#		get the HTTP port for this container
		port=$(docker inspect --format='{{(index (index .NetworkSettings.Ports "80/tcp") 0).HostPort}}' $c_name)
	 	echo 'HTTP listening on port: '$port

#		show db_host IP address
		db_host=$(docker inspect $c_name | grep 'db_host')
		echo $db_host	

#		get arrays of mapped volume sources and destinations
		vs_array=($(echo $(docker inspect $c_name | grep "Source") | tr " " "\n"))
		vd_array=($(echo $(docker inspect $c_name | grep "Destination") | tr " " "\n"))

		echo ' '
		echo 'Mapped volumes (host ==> container):'
		i=0
		for v_source in ${vs_array[@]}
		do
	 		if [[ $v_source != *"Source"* ]]; then
		 		echo "    "$v_source' ==> '${vd_array[$i]}
		 	fi
		 	((i++))
		done

#		show php version
		echo ' '
		docker exec $c_name php -v

#		show xdebug status
		docker exec $c_name php -i | grep 'xdebug support'		
		docker exec $c_name php -i | grep 'xdebug.idekey'
	fi
}
if [ "$1" == "" ]
then
        usage
fi

if [ "$1" == "-h" ]
then
        help
fi

# get options
while getopts ":d:f:h:m:p:v:w:" x; do
    case "${x}" in
        d)
            d=${OPTARG}
            ;;
        f)
            f=${OPTARG}
            ;;
        h)
            h=${OPTARG}
            ;;
        m)
            m=${OPTARG}
            ;;
        p)
            p=${OPTARG}
            ;;
    	v)  
            v=${OPTARG}
	       ;;
    	w)  
            w=${OPTARG}
	       ;;
        *)
            usage
            ;;
    esac
done
shift $((OPTIND-1))

# default values
php_options=(7.0 7.1 7.2 7.3 7.4)
port=80
moodledata=$PWD/moodledata
db_host=127.0.0.1
php=7.3
webroot=$PWD

# default values may be overridden in a /etc/moodlehost.conf file
if [ -f /etc/moodlehost.conf ]
        then
. /etc/moodlehost.conf
fi

# all values may be overridden by using cli options
if [ "$d" != "" ]
then
	db_host=$d
fi

if [ "$f" != "" ]
then
	filedir=$f
fi

if [ "$m" != "" ]
then
	moodledata=$m
fi

if [ "$p" != "" ]
then
	port=$p
fi

if [ "$v" != "" ]
then
	php=$v
fi

if [ "$w" != "" ]
then
	webroot=$w
fi

dockername="moodlehost-${port}"


if [ "$1" == "start" ]
then
	if [ ! -d $moodledata ]
	then
		mkdir ${moodledata}
		chmod -R 777 $moodledata
		if [ ! -d $moodledata ]
		then
			echo "ERROR! Cannot create $moodledata directory - aborting!"
			exit 1
		else
			echo "$moodledata directory created"
		fi
	fi

	docker rm -f $dockername >/dev/null 2>/dev/null
	if [ "$filedir" == "" ]
	then
		docker run -d -p ${port}:80 --network host \
			--name $dockername \
			-v ${webroot}:/var/www/html \
			-v ${moodledata}:/var/www/moodledata \
			--add-host db_host:${db_host} \
		qmulits/moodlehost:${php}
	else
		docker run -d -p ${port}:80 --network host \
			--name $dockername \
			-v ${webroot}:/var/www/html \
			-v ${moodledata}:/var/www/moodledata \
			-v ${filedir}:/var/www/moodledata/filedir \
			--add-host db_host:${db_host} \
		qmulits/moodlehost:${php}
	fi
	echo 'ServerName moodle' >> /etc/apache2/apache2.conf
	docker exec -it $dockername bash -c 'rm -f /var/log/apache2/*'
	docker exec -it $dockername apachectl graceful
	echo "==> $dockername with PHP version $php (re-)started on port $port using ${webroot} as web root"
fi

if [ "$1" == "status" ]
then
echo ' '
echo "moodlehost $version - status"
c_array=($(echo $(docker ps --format "{{.Names}}") | tr " " "\n"))


for c_name in ${c_array[@]}
do
	check_container $c_name
done
echo '---------------------------------------'
echo ' '
fi

if [ "$1" == "stop" ]
then
	docker rm -f $dockername >/dev/null 2>/dev/null
	echo "==> Container $dockername stopped and removed!"
fi

if [ "$1" == "purge" ]
then
	rm -rf ${moodledata}/cache
	rm -rf ${moodledata}/localcache
	rm -rf ${moodledata}/lock
	rm -rf ${moodledata}/muc
	rm -rf ${moodledata}/sessions
	rm -rf ${moodledata}/temp
	rm -rf ${moodledata}/trashdir
	
	echo "==> $dockername: moodledata purged"
fi
