#!/usr/bin/env bash

# script to run an Apache instance with all trimmings to run or develop a Moodle environment
# IMPORTANT! The provided server is by no means secure and shouild never be used in a production environment!
# m.opitz@qmul.ac.uk | 2019-11-04

# v.0.1 - works
# v.0.2 - allowing cli options to override values
# v.1.0 - added installer script - GM
# v.1.1 - allowing to specify path to webroot
# v.1.2 - allowing to specify path to filedir
# v.1.3 - added status report
# v.1.4 - added support for PHP 7.4
# v.1.5 - added correct path to moodledate for non-default webroot
# v.1.6 - added '-n host' option to use host network
# v.1.7 - 2022-06-14 now using opitz/moodlehost image from Docker Hub
# v.1.8 - 2022-07-01 starting cron daemon using Docker exec as it will not start within the container
# v.1.9 - 2022-07-01 adding local xdebug option for macOS/PHPStorm
# v.1.9.1 - 2022-07-14 adding PHP version 8.1 | making PHP 8.0 the default default
# v.1.9.2 - 2022-07-19 cleaned up echo response when creating moodledata folder
# v.1.9.3 - 2022-07-19 added option to NOT create a moodledata directory

version=1.9.3

usage() {
	echo "Usage: $0 [-d <db_host_ip>] [-h] [-m <moodledata_path>] [-p <ip_port>] [-v <php_version> [start][stop][purge]" 1>&2;
	exit 1;
}

help() {
	echo "Usage: $0 [-d <db_host_ip>] [-h] [-m <moodledata_path>] [-p <ip_port>] [-v <php_version> [start][stop][purge]" 1>&2;
	echo "available options:"
	echo "-d <db_host_ip>: set the IP address of the database server (default: 127.0.0.1)"
	echo "-f <path_to_filedir>: map an existing filedir repository into /var/www/moodledata/filedir"
	echo "-h this help page"
	echo "-l local xdebug for macOS/PHPStorm"
	echo "-m <moodledata>: set path on host(!) to moodledata (default: $PWD/moodledata)"
	echo "-m none: do NOT create a moodledata directory"
	echo "-n host: forcing docker to use the host network"
	echo "-p <port>: set the port number used by Apache (default: 80)"
	echo "-v <php_version>: select the PHP version (default: 8.0, allowed values: 7.1, 7.2, 7.3, 7.4, 8.0, 8.1)"
	echo "-w <webroot>: set the path to the webroot directory (default: $PWD)"
	exit 1;
}

function check_container() {
	c_name=$1
#	do this for 'moodlehost' containers only
	if [[ $c_name == *"moodlehost"* ]]; then
	echo '---------------------------------------'
	echo 'Docker container '$c_name

#		get the HTTP port for this container
		port=$(docker inspect --format='{{(index (index .NetworkSettings.Ports "80/tcp") 0).HostPort}}' $c_name)
		echo 'HTTP listening on port: '$port

#		show db_host IP address
		db_host=$(docker inspect $c_name | grep 'db_host')
		echo $db_host

#		get arrays of mapped volume sources and destinations
		vs_array=($(echo $(docker inspect $c_name | grep "Source") | tr " " "\n"))
		vd_array=($(echo $(docker inspect $c_name | grep "Destination") | tr " " "\n"))

		echo ' '
		echo 'Mapped volumes (host ==> container):'
		i=0
		for v_source in ${vs_array[@]}
		do
			if [[ $v_source != *"Source"* ]]; then
			echo "    "$v_source' ==> '${vd_array[$i]}
			fi
			((i++))
		done

#		show php version
		echo ' '
		docker exec $c_name php -v

#		show xdebug status
		docker exec $c_name php -i | grep 'xdebug support'
		docker exec $c_name php -i | grep 'xdebug.idekey'
	fi
}
if [ "$1" == "" ]
then
        usage
fi

if [ "$1" == "-h" ]
then
        help
fi

# get options
while getopts ":d:f:h:lm:n:p:v:w:" x; do
    case "${x}" in
        d)
            d=${OPTARG}
            ;;
        f)
            f=${OPTARG}
            ;;
        h)
            h=${OPTARG}
            ;;
        l)
            localxdebug=1
            ;;
        m)
            m=${OPTARG}
            ;;
        n)
            n=${OPTARG}
            ;;
        p)
            p=${OPTARG}
            ;;
	v)
            v=${OPTARG}
	    ;;
	w)
            w=${OPTARG}
	    ;;
        *)
            usage
            ;;
    esac
done
shift $((OPTIND-1))

# default values
php_options=(7.1 7.2 7.3 7.4 8.0 8.1)
port=80
moodledata=$PWD/moodledata
db_host=127.0.0.1
php=8.0
webroot=$PWD

# default values may be overridden in a /etc/moodlehost.conf file
if [ -f /etc/moodlehost.conf ]
        then
. /etc/moodlehost.conf
fi

# all values may be overridden by using cli options
if [ "$d" != "" ]
then
	db_host=$d
fi

if [ "$f" != "" ]
then
	filedir=$f
fi

if [ "$p" != "" ]
then
	port=$p
fi

if [ "$v" != "" ]
then
	php=$v
fi

if [ "$w" != "" ]
then
	webroot=$w
	moodledata=$webroot/moodledata
fi

if [ "$m" != "" ]
then
	moodledata=$m
fi

if [ "$n" == "host" ]
then
	network=$n
fi

dockername="moodlehost-${port}"


if [ "$1" == "start" ]
then
	if [ "$moodledata" != "none" ]
	then
		if [ ! -d $moodledata ]
		then
			mkdir ${moodledata}
			chmod -R 777 $moodledata
			if [ ! -d $moodledata ]
			then
				echo "==> ERROR! Cannot create $moodledata directory - aborting!"
				exit 1
			else
				echo "==> $moodledata directory created"
			fi
		fi
	fi

	docker rm -f $dockername >/dev/null 2>/dev/null
	if [ "$filedir" == "" ]
	then
		if [ "$network" == "host" ]
		then
			docker run -d -p ${port}:80 \
				--name $dockername \
				--network host \
				-v ${webroot}:/var/www/html \
				-v ${moodledata}:/var/www/moodledata \
				--add-host db_host:${db_host} \
			opitz/moodlehost:${php}
		else
      docker run -d -p ${port}:80 \
        --name $dockername \
        -v ${webroot}:/var/www/html \
        -v ${moodledata}:/var/www/moodledata \
        --add-host db_host:${db_host} \
      opitz/moodlehost:${php}
		fi
	else
		if [ "$network" == "host" ]
		then
			docker run -d -p ${port}:80 \
				--name $dockername \
				--network host \
				-v ${webroot}:/var/www/html \
				-v ${moodledata}:/var/www/moodledata \
				-v ${filedir}:/var/www/moodledata/filedir \
				--add-host db_host:${db_host} \
			opitz/moodlehost:${php}
		else
      docker run -d -p ${port}:80 \
        --name $dockername \
        -v ${webroot}:/var/www/html \
        -v ${moodledata}:/var/www/moodledata \
        -v ${filedir}:/var/www/moodledata/filedir \
        --add-host db_host:${db_host} \
      opitz/moodlehost:${php}
		fi
	fi

  # apply local xdebug settings for macOS/PHPStorm
  if [ "$localxdebug" == "1" ]
  then
    ipaddr=$(ipconfig getifaddr en0)
    docker exec -it moodlehost-$port sed -i 's/xdebug.discover_client_host = 1/xdebug.discover_client_host = 0/' /usr/local/etc/php/php.ini
    docker exec -it moodlehost-$port sed -i "s/xdebug.client_host = 127.0.0.1/xdebug.client_host = $ipaddr/" /usr/local/etc/php/php.ini
    docker exec -it moodlehost-$port service apache2 graceful > /dev/null 2>&1
    echo "==> local xdebug setup for IP $ipaddr active."
  fi

  # start cron daemon in the container that just started
  # this is needed because cron will not start within the container
  docker exec -it $dockername cron

	echo "==> $dockername with PHP version $php (re-)started on port $port using ${webroot} as web root"
fi

if [ "$1" == "status" ]
then
echo ' '
echo "moodlehost $version - status"
c_array=($(echo $(docker ps --format "{{.Names}}") | tr " " "\n"))


for c_name in ${c_array[@]}
do
	check_container $c_name
done
echo '---------------------------------------'
echo ' '
fi

if [ "$1" == "stop" ]
then
	docker rm -f $dockername >/dev/null 2>/dev/null
	echo "==> Container $dockername stopped and removed!"
fi

if [ "$1" == "purge" ]
then
	if [[ ! -d ${moodledata} ]]; then
		echo "No moodledata found at $moodledata - aborting!"
		exit 1
	fi
	rm -rf ${moodledata}/cache
	rm -rf ${moodledata}/localcache
	rm -rf ${moodledata}/lock
	rm -rf ${moodledata}/muc
	rm -rf ${moodledata}/sessions
	rm -rf ${moodledata}/temp
	rm -rf ${moodledata}/trashdir

	echo "==> $dockername: moodledata purged"
fi
